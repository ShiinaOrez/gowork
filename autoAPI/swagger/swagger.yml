swagger: "2.0"
info:
  title: Elite API
  description: Elite is a application which due to deal with the relationship between
    enterprises and students
  version: 0.0.1
  termsOfService: http://www.muxixyz.com
  contact:
    email: Shiinaorez@gmail.com
basePath: /api/v1.0
paths:
  /auth/company/{Cid}/info:
    put:
      tags:
      - auth
      description: Confirm request will be posted to reviewer.
      operationId: AuthController.StartConfirmCompanyInformation
      parameters:
      - in: path
        name: Cid
        description: The company ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} confirm request post successful'
        "401":
          description: '{string} confirm request post failed'
    post:
      tags:
      - auth
      description: Post the company base information.
      operationId: AuthController.CompanyInformationPost
      parameters:
      - in: body
        name: companyNature
        description: The company nature
        required: true
        type: string
      - in: body
        name: contactName
        description: The contact person name
        required: true
        type: string
      - in: body
        name: contactTel
        description: The contact person telephone number
        required: true
        type: string
      - in: body
        name: licenseLocation
        description: The company license location
        required: true
        type: string
      - in: body
        name: initTags
        description: The company init tags(max = 6)
        required: true
        schema:
          $ref: '#/definitions/models.CompanyInitTags'
      - in: path
        name: Cid
        description: The company ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} company information post successful'
        "401":
          description: '{string} company information post failed'
  /auth/company/signin:
    post:
      tags:
      - auth
      description: Company login.
      operationId: AuthController.CompanySignIn
      parameters:
      - in: body
        name: account
        description: The company account telephone or email
        required: true
        type: string
      - in: body
        name: code
        description: The confirm code
        required: true
        type: string
      - in: query
        name: loginType
        description: 'The type to login: tel or email'
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResultOfCompanyLogin'
        "401":
          description: ""
          schema:
            $ref: '#/definitions/models.CompanyLoginError'
  /auth/company/signup:
    post:
      tags:
      - auth
      description: New company must sign up.
      operationId: AuthController.CompanySignUp
      parameters:
      - in: body
        name: companyName
        description: The company name
        required: true
        type: string
      - in: body
        name: password
        description: The password of account
        required: true
        type: string
      - in: body
        name: emailAddress
        description: The email address of company account
        required: true
        type: string
      - in: body
        name: confirmCode
        description: The confirm code we send to email
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResultOfCompanySignUp'
        "401":
          description: ""
          schema:
            $ref: '#/definitions/models.SignUpError'
  /auth/email/confirm:
    get:
      tags:
      - auth
      description: Get email confirm code.
      operationId: AuthController.GetEmailConfirmCode
      parameters:
      - in: query
        name: email
        description: The telephone number ready for confirm
        required: true
        type: string
      responses:
        "200":
          description: '{string} send code successful'
        "410":
          description: '{string} please wait for minute'
  /auth/reviewer/signin:
    post:
      tags:
      - auth
      description: Reviewer login
      operationId: AuthController.ReviewerSignIn
      parameters:
      - in: body
        name: name
        description: The reviewer name
        required: true
        type: string
      - in: body
        name: password
        description: The confirm code
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResultOfReviewerLogin'
        "401":
          description: ""
          schema:
            $ref: '#/definitions/models.ReviewerLoginError'
  /auth/reviewer/signup:
    post:
      tags:
      - auth
      description: New reviewer must sign up.
      operationId: AuthController.ReviewerSignUp
      parameters:
      - in: body
        name: name
        description: The reviewer name
        required: true
        type: string
      - in: body
        name: password
        description: The reviewer account password
        required: true
        type: string
      - in: body
        name: intro
        description: The reviewer introduction
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResultOfReviewerSignUp'
        "401":
          description: '{string} sign up failed'
  /auth/telephone/confirm:
    get:
      tags:
      - auth
      description: Get telephone confirm code
      operationId: AuthController.GetTelephoneConfirmCode
      parameters:
      - in: query
        name: tel
        description: The telephone number ready for confirm
        required: true
        type: string
      responses:
        "200":
          description: '{string} send code successful'
        "410":
          description: '{string} please wait for minute'
  /auth/user/signin:
    post:
      tags:
      - auth
      description: Account sign in.
      operationId: AuthController.UserSignIn
      parameters:
      - in: body
        name: email
        description: The email for login
        required: true
        type: string
      - in: body
        name: tel
        description: The telephone number of login
        required: true
        type: string
      - in: body
        name: password
        description: The password for login
        required: true
        type: string
      - in: query
        name: loginType
        description: The login type is email or telephone
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "401":
          description: '{string}'
  /auth/user/signup:
    post:
      tags:
      - auth
      description: New user must sign up.
      operationId: AuthController.UserSignUp
      parameters:
      - in: body
        name: realName
        description: The real name of user
        required: true
        type: string
      - in: body
        name: sex
        description: The sex of user
        required: true
        type: integer
        format: int64
      - in: body
        name: birthYear
        description: The birth year of user
        required: true
        type: string
      - in: body
        name: birthMonth
        description: The birth month of user
        required: true
        type: string
      - in: body
        name: city
        description: The city of user
        required: true
        type: string
      - in: body
        name: university
        description: The university of user
        required: true
        type: string
      - in: body
        name: enrollYear
        description: The enroll year of user
        required: true
        type: string
      - in: body
        name: graduateYear
        description: The graduate year of user
        required: true
        type: string
      - in: body
        name: educationLevel
        description: The education level of user
        required: true
        type: string
      - in: body
        name: major
        description: The major of user
        required: true
        type: string
      - in: body
        name: status
        description: The status of user
        required: true
        type: string
      - in: body
        name: initTags
        description: The initialize tags of user
        required: true
        schema:
          $ref: '#/definitions/models.AuthInitTags'
      - in: body
        name: intro
        description: The introduction of user
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResultOfUserLogin'
        "401":
          description: '{string} sign up failed'
  /company/{Cid}/info:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanyInformationByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/{Cid}/position/list:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.GetCompanyPositionListByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/attention:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanyPayAttentionToSomebody
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    delete:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanyCancelAttentionSomebody
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/attention/list:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.GetCompanyAttentionList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/category:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CreateAndPostCompanyCategory
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/category/{CateID}/tags:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.AddTagToCompanyCategory
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/email:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.UpdateCompanyEmailAddress
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/email/confirm:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.ConfirmCompanyEmailAddress
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/info:
    put:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.EditCompanyInformation
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanyBaseInformationByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/logo:
    put:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.UpdateCompanyLogo
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/mission/list:
    get:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.GetCompanyMissionListByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/missionList:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CreateAndPostMissionList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/offer:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CreateAndPostCompanyOffer
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/offer/{Oid}:
    get:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.GetCompanyOfferInformationByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    delete:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.DeleteCompanyOfferByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/position:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CreateAndPostPosition
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/position/{Pid}:
    put:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.EditCompanyPositionByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    delete:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.DeleteCompanyPositionByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/position/{Pid}/resume:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.ResumeToCompanyPosition
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/position/{Pid}/search:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.SearchCompanyPositionByNormalWay
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/search/fast:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanySearchByFastWay
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/search/intelligent:
    post:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.CompanySearchByIntelligent
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /company/tel:
    put:
      tags:
      - company
      description: New user must sign up.
      operationId: CompanyController.UpdateCompanyTelephone
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /elite/industry/list:
    post:
      tags:
      - elite
      description: Search elite by intelligent way.
      operationId: EliteController.SearchEliteByIntelligentWay
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Payload
        description: Search payload
        required: true
        schema:
          $ref: '#/definitions/object'
        default: models.SearchPayload
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.EliteList'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /elite/search:
    post:
      tags:
      - elite
      description: Search elite by normal way.
      operationId: EliteController.SearchElite
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Payload
        description: Search payload
        required: true
        schema:
          $ref: '#/definitions/object'
        default: models.SearchPayload
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.EliteList'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /message/{MsgID}:
    put:
      tags:
      - message
      description: New user must sign up.
      operationId: MessageController.ReadMessage
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    post:
      tags:
      - message
      description: New user must sign up.
      operationId: MessageController.GetMessageInformationByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /message/company/list:
    post:
      tags:
      - message
      description: New user must sign up.
      operationId: MessageController.CompanyMessageList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /message/feedback/list:
    post:
      tags:
      - message
      description: New user must sign up.
      operationId: MessageController.FeedbackMessageList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /message/platform/list:
    post:
      tags:
      - message
      description: New user must sign up.
      operationId: MessageController.PlatformMessageList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /mission/:
    post:
      tags:
      - mission
      description: Create a mission and post it.
      operationId: MissionController.CreateAndPostMission
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Payload
        description: models.CreateMissionPayload
        schema:
          $ref: '#/definitions/object'
      responses:
        "200":
          description: '{int} MissionID'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} company not existed'
  /mission/{Mid}:
    put:
      tags:
      - mission
      description: Company modify mission information.
      operationId: MissionController.ModifyMissionByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to modify
        required: true
        type: integer
        format: int64
      - in: body
        name: Payload
        description: models.CreateMissionPayload
        schema:
          $ref: '#/definitions/object'
      responses:
        "200":
          description: '{string} modify successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} mission not existed'
    post:
      tags:
      - mission
      description: Submit the works for mission
      operationId: MissionController.SubmitMissionByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to submit
        required: true
        type: integer
        format: int64
      - in: body
        name: Payload
        description: models.SubmitMissionPayload
        schema:
          $ref: '#/definitions/object'
      responses:
        "200":
          description: '{string} submit successfully!'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | mission not existed'
        "406":
          description: '{string} File error'
        "407":
          description: '{string} submit failed'
    delete:
      tags:
      - mission
      description: Delete a mission by ID.
      operationId: MissionController.DeleteMissionByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to delete
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} delete successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} mission not existed'
  /mission/{Mid}/feedback:
    get:
      tags:
      - mission
      description: Get the mission feedback.
      operationId: MissionController.GetMissionFeedback
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to give up
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.CompanyFeedback'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | mission not existed'
  /mission/{Mid}/info:
    get:
      tags:
      - mission
      description: Mission information.
      operationId: MissionController.MissionInformationByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to get
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.MissionInformation'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | mission not existed'
  /mission/{Mid}/statistics:
    get:
      tags:
      - mission
      description: New user must sign up.
      operationId: MissionController.MissionStatisticsByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to get
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.MissionStatistics'
        "401":
          description: '{string} sign up failed'
  /mission/{Mid}/status:
    get:
      tags:
      - mission
      description: Get the status between user and mission.
      operationId: MissionController.GetMissionStatusByID
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Mid
        description: The mission id to Gain
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{int} 1 for gained, 0 for not'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | mission not existed'
  /mission/file/upload:
    post:
      tags:
      - mission
      description: Upload the file.
      operationId: MissionController.UploadFileOnlyZip
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: File
        description: The file you want to upload
        required: true
        type: string
      responses:
        "200":
          description: '{string} File URL'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | mission not existed'
        "406":
          description: '{string} File error'
  /mission/search:
    post:
      tags:
      - mission
      description: Search mission.
      operationId: MissionController.SearchForMission
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Payload
        description: models.SearchPayload
        schema:
          $ref: '#/definitions/object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.MissionList'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /mission/tag/list:
    get:
      tags:
      - mission
      description: Get the mission tags list.
      operationId: MissionController.GetStaticMissionTagList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TagList'
        "407":
          description: '{string} something wrong'
  /missionList/{MlID}:
    post:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.DeleteMissionListByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /missionList/{MlID}/getElite:
    post:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.MissionListGetElite
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /missionList/attention/{MlID}:
    put:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.CancelMissionListAttention
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
    post:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.PayAttentionToMissionList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /missionList/attention/{MlID}/status:
    post:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.GetUserToMissionListStatusByID
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /missionList/attention/list:
    post:
      tags:
      - missionList
      description: New user must sign up.
      operationId: MissionListController.GetMissionListAttentionList
      responses:
        "200":
          description: '{string} sign up successful'
        "401":
          description: '{string} sign up failed'
  /tag/ability/list:
    get:
      tags:
      - tag
      description: Get ability tags list.
      operationId: TagController.TagAbilityList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TagList'
        "201":
          description: '{string} none tag exist'
  /tag/industry/list:
    get:
      tags:
      - tag
      description: Get industry tag list.
      operationId: TagController.TagIndustryList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TagList'
        "201":
          description: '{string} none tag exist'
  /tag/position/list:
    get:
      tags:
      - tag
      description: Get position tag list.
      operationId: TagController.TagPositionList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TagList'
        "201":
          description: tag exist
          schema:
            $ref: '#/definitions/none'
  /tag/university/list:
    get:
      tags:
      - tag
      description: Get university tags list.
      operationId: TagController.TagUniversityList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TagList'
        "201":
          description: '{string} none tag exist'
  /user/{Uid}/info:
    get:
      tags:
      - user
      description: Get user's information by ID
      operationId: UserController.GetUserInformationByID
      parameters:
      - in: path
        name: Uid
        description: The user ID
        required: true
        type: integer
        format: int64
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.GetUserInformation'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/attention/{Cid}:
    put:
      tags:
      - user
      description: User cancel pay attention to a company by id.
      operationId: UserController.UserCancelAttentionToCompany
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Cid
        description: The company id
        required: true
        type: string
      responses:
        "200":
          description: '{string} cancel successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | company not existed | haven''t attention'
    post:
      tags:
      - user
      description: Pay attention to a company by Cid
      operationId: UserController.UserPayAttentionToCompany
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Cid
        description: The company id
        required: true
        type: string
      responses:
        "200":
          description: '{string} pay attention successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | company not existed'
        "405":
          description: '{string} already attention'
  /user/attention/{Cid}/status:
    get:
      tags:
      - user
      description: Query is a user-company attention relationship existed.
      operationId: UserController.UserAttentionCompanyStatus
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: path
        name: Cid
        description: The company id
        required: true
        type: string
      responses:
        "200":
          description: '{int}'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user | company not existed'
  /user/attention/list:
    get:
      tags:
      - user
      description: Get user's attention list
      operationId: UserController.UserAttentionList
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserAttentionCompanyList'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/avatar:
    post:
      tags:
      - user
      description: Update user's avatar
      operationId: UserController.UpdateAvatar
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: newAvatar
        description: The avatar image
        required: true
        type: string
      responses:
        "200":
          description: '{string} newAvatarURL'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
        "406":
          description: '{string} avatar upload failed'
  /user/company/suitability/list:
    get:
      tags:
      - user
      description: Get the user-company suitability list.
      operationId: UserController.CompanySuitabilityList
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.GetCompanySuitabilityList'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/editPassword:
    post:
      tags:
      - user
      description: User edit password.
      operationId: UserController.UserEditPassword
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: oldPassword
        description: The old password to change
        required: true
        type: string
      - in: body
        name: newPassword
        description: The new password want to change
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.GetUserBaseInformation'
        "401":
          description: '{string} auth failed || old password confirm failed'
        "402":
          description: '{string} user not existed'
  /user/email/edit:
    post:
      tags:
      - user
      description: Confirm email address by code and change it
      operationId: UserController.ConfirmEmailAddress
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Email
        description: The email address you want to change
        required: true
        type: string
      - in: body
        name: Code
        description: The confirm code sent by server
        required: true
        type: string
      responses:
        "200":
          description: '{string} confirm successful'
        "401":
          description: '{string} auth | confirm failed'
        "402":
          description: '{string} user not existed'
  /user/info:
    get:
      tags:
      - user
      description: Get user base information
      operationId: UserController.GetUserBaseInformation
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.GetUserBaseInformation'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
    post:
      tags:
      - user
      description: Edit personal information
      operationId: UserController.EditSetting
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: '{object}'
        name: RequestBody
        description: The request body for edit setting
        required: true
        schema:
          $ref: '#/definitions/models.EditSettingBody'
      responses:
        "200":
          description: '{string} edit successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/mission/info:
    get:
      tags:
      - user
      description: Get user's mission information
      operationId: UserController.UserMissionInformation
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: query
        name: Type
        description: 'query mode: all, doing, finish'
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserMissionInformation'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/platform/setting:
    get:
      tags:
      - user
      description: Get user's platform setting information
      operationId: UserController.PlatformInformation
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserPlatformSetting'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
    post:
      tags:
      - user
      description: New user must sign up.
      operationId: UserController.EditPlatformSetting
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: RequestBody
        description: models.UserPlatformSetting
        schema:
          $ref: '#/definitions/object'
      responses:
        "200":
          description: '{string} edit successful'
        "401":
          description: '{string} auth failed'
        "402":
          description: '{string} user not existed'
  /user/tel/edit:
    post:
      tags:
      - user
      description: Confirm telephone number by code and change it
      operationId: UserController.ConfirmTelephoneNumber
      parameters:
      - in: header
        name: Token
        description: The token to conform
        required: true
        type: string
      - in: body
        name: Tel
        description: The telephone number you want to change
        required: true
        type: string
      - in: body
        name: Code
        description: The confirm code sent by server
        required: true
        type: string
      responses:
        "200":
          description: '{string} confirm successful'
        "401":
          description: '{string} auth | confirm failed'
        "402":
          description: '{string} user not existed'
definitions:
  models.AuthInitTags:
    title: AuthInitTags
    type: object
    properties:
      tags_list:
        type: array
        items:
          $ref: '#/definitions/models.TagForUserModelID'
  models.BaseModel:
    title: BaseModel
    type: object
  models.CompanyFeedback:
    title: CompanyFeedback
    type: object
    properties:
      feedback:
        type: string
      star_level:
        type: number
        format: float
  models.CompanyInitTags:
    title: CompanyInitTags
    type: object
    properties:
      tags_list:
        type: array
        items:
          $ref: '#/definitions/models.TagForCompanyModel'
  models.CompanyLoginError:
    title: CompanyLoginError
    type: object
    properties:
      error_code:
        type: integer
        format: int64
      msg:
        type: string
  models.CompanySimpleInformation:
    title: CompanySimpleInformation
    type: object
    properties:
      company_avatar:
        type: string
      company_id:
        type: integer
        format: int64
      company_name:
        type: string
  models.CompanySuitability:
    title: CompanySuitability
    type: object
    properties:
      company_avatar:
        type: string
      company_id:
        type: integer
        format: int64
      company_name:
        type: string
      suitability:
        type: number
        format: float
  models.EditSettingBody:
    title: EditSettingBody
    type: object
    properties:
      birth_month:
        type: integer
        format: int64
      birth_year:
        type: integer
        format: int64
      city:
        type: string
      education:
        type: string
      enroll_year:
        type: integer
        format: int64
      intro:
        type: string
      major:
        type: string
      name:
        type: string
      sex:
        type: boolean
      status:
        type: string
      university:
        type: string
      user_tags_list:
        type: array
        items:
          $ref: '#/definitions/models.TagForUserModel'
  models.Elite:
    title: Elite
    type: object
    properties:
      elite_age:
        type: integer
        format: int64
      elite_avatar:
        type: string
      elite_edu:
        type: string
      elite_email:
        type: string
      elite_id:
        type: integer
        format: int64
      elite_name:
        type: string
      elite_star_level:
        type: number
        format: float
      elite_status:
        type: string
      elite_tags:
        type: array
        items:
          $ref: '#/definitions/models.Tag'
      elite_tel:
        type: string
      elite_university:
        type: string
      is_attention:
        type: boolean
  models.EliteList:
    title: EliteList
    type: object
    properties:
      elites_list:
        type: array
        items:
          $ref: '#/definitions/models.Elite'
      length:
        type: integer
        format: int64
  models.GetCompanySuitabilityList:
    title: GetCompanySuitabilityList
    type: object
    properties:
      length:
        type: integer
        format: int64
      resp_body:
        type: array
        items:
          $ref: '#/definitions/models.CompanySuitability'
  models.GetUserBaseInformation:
    title: GetUserBaseInformation
    type: object
    properties:
      avatar_url:
        type: string
      birth_month:
        type: integer
        format: int64
      birth_year:
        type: integer
        format: int64
      city:
        type: string
      education:
        type: string
      email_address:
        type: string
      enroll_year:
        type: integer
        format: int64
      intro:
        type: string
      major:
        type: string
      name:
        type: string
      sex:
        type: boolean
      status:
        type: string
      tel:
        type: string
      university:
        type: string
      user_tags_list:
        type: array
        items:
          $ref: '#/definitions/models.TagForUserModel'
  models.GetUserInformation:
    title: GetUserInformation
    type: object
    properties:
      age:
        type: integer
        format: int64
      attention:
        type: boolean
      avatar_url:
        type: string
      city:
        type: string
      edu_time_range:
        type: string
      education:
        type: string
      email_address:
        type: string
      intro:
        type: string
      major:
        type: string
      missions_list:
        type: array
        items:
          $ref: '#/definitions/models.MissionEntityToShow'
      name:
        type: string
      star_level:
        type: integer
        format: int64
      status:
        type: string
      tel:
        type: string
      university:
        type: string
      user_tags_list:
        type: array
        items:
          $ref: '#/definitions/models.TagForUserModel'
  models.Mission:
    title: Mission
    type: object
    properties:
      company_avatar:
        type: string
      company_name:
        type: string
      end_time:
        type: string
      id:
        type: integer
        format: int64
      mission_name:
        type: string
      start_time:
        type: string
      status:
        type: boolean
  models.MissionEntity:
    title: MissionEntity
    type: object
    properties:
      company_id:
        type: integer
        format: int64
      company_name:
        type: string
      end_time:
        type: string
      is_online:
        type: boolean
      join_end_time:
        type: string
      mission_id:
        type: integer
        format: int64
      mission_name:
        type: string
      start_time:
        type: string
      tag_list:
        type: array
        items:
          $ref: '#/definitions/models.Tag'
  models.MissionEntityToShow:
    title: MissionEntityToShow
    type: object
    properties:
      mission_id:
        type: integer
        format: int64
      statu:
        type: boolean
  models.MissionInformation:
    title: MissionInformation
    type: object
    properties:
      mission_detail:
        type: string
      mission_end_time:
        type: string
      mission_file:
        type: string
      mission_intro:
        type: string
      mission_member:
        type: integer
        format: int64
      mission_name:
        type: string
      mission_online:
        type: boolean
      mission_start_time:
        type: string
      mission_tag_list:
        type: array
        items:
          $ref: '#/definitions/models.Tag'
  models.MissionList:
    title: MissionList
    type: object
    properties:
      length:
        type: integer
        format: int64
      missions_list:
        type: array
        items:
          $ref: '#/definitions/models.MissionEntity'
  models.MissionStatistics:
    title: MissionStatistics
    type: object
    properties:
      member:
        type: integer
        format: int64
  models.ResultOfCompanyLogin:
    title: ResultOfCompanyLogin
    type: object
    properties:
      company_id:
        type: integer
        format: int64
      token:
        type: string
  models.ResultOfCompanySignUp:
    title: ResultOfCompanySignUp
    type: object
    properties:
      company_id:
        type: integer
        format: int64
  models.ResultOfReviewerLogin:
    title: ResultOfReviewerLogin
    type: object
    properties:
      company_id:
        type: integer
        format: int64
      token:
        type: string
  models.ResultOfReviewerSignUp:
    title: ResultOfReviewerSignUp
    type: object
    properties:
      reviewer_id:
        type: integer
        format: int64
  models.ResultOfUserLogin:
    title: ResultOfUserLogin
    type: object
    properties:
      token:
        type: string
      user_id:
        type: integer
        format: int64
  models.ReviewerLoginError:
    title: ReviewerLoginError
    type: object
    properties:
      error_code:
        type: integer
        format: int64
      msg:
        type: string
  models.SignUpError:
    title: SignUpError
    type: object
    properties:
      error_code:
        type: integer
        format: int64
      msg:
        type: string
  models.Tag:
    title: Tag
    type: object
    properties:
      tag_id:
        type: integer
        format: int64
      tag_name:
        type: string
  models.TagForCompanyModel:
    title: TagForCompanyModel
    type: object
    properties:
      companyid:
        type: integer
        format: int64
      tagid:
        type: integer
        format: int64
  models.TagForUserModel:
    title: TagForUserModel
    type: object
    properties:
      tagid:
        type: integer
        format: int64
      userid:
        type: integer
        format: int64
      value:
        type: integer
        format: int64
  models.TagForUserModelID:
    title: TagForUserModelID
    format: int64
    type: integer
  models.TagList:
    title: TagList
    type: object
    properties:
      category_id:
        type: integer
        format: int64
      category_name:
        type: string
      length:
        type: integer
        format: int64
      tags_list:
        type: array
        items:
          $ref: '#/definitions/models.Tag'
  models.UserAttentionCompanyList:
    title: UserAttentionCompanyList
    type: object
    properties:
      company_list:
        type: array
        items:
          $ref: '#/definitions/models.CompanySimpleInformation'
      length:
        type: integer
        format: int64
  models.UserMissionInformation:
    title: UserMissionInformation
    type: object
    properties:
      average_star:
        type: number
        format: float
      mission_list:
        type: array
        items:
          $ref: '#/definitions/models.Mission'
  models.UserPlatformSetting:
    title: UserPlatformSetting
    type: object
  none:
    title: none
    type: object
  object:
    title: object
    type: object
tags:
- name: auth
  description: |
    Operations about Users
- name: user
  description: |
    Operations about Users
- name: company
  description: |
    Operations about Companies
- name: mission
  description: |
    Operations about Missions
- name: tag
  description: |
    Operations about Tags
- name: elite
  description: |
    Operations about Elites
- name: missionList
  description: |
    Operations about MissionLists
- name: message
  description: |
    Operations about Messages
